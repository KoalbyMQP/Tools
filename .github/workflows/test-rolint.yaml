name: RoLint - Test & Build

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'RoLint/**'
  workflow_dispatch:  # Allows manual triggering
    inputs:
      reason:
        description: 'Reason for manual run'
        required: false
        default: 'Manual test run'

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]
    
    defaults:
      run:
        working-directory: ./RoLint
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build pytest flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        # Install the package in development mode
        pip install -e .
    
    - name: Lint with flake8
      run: |
        echo "Running linting checks..."
        # Stop the build if there are Python syntax errors or undefined names
        flake8 rolint/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 rolint/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests
      run: |
        echo "Running tests..."
        if [ -d "tests" ]; then
          pytest tests/ -v --tb=short
        else
          echo "No tests directory found, skipping test step"
        fi
    
    # Only build the package once (on Python 3.11) to verify it can be built
    - name: Build package (Python 3.11 only)
      if: matrix.python-version == '3.11'
      run: |
        echo "Building package..."
        python -m build
    
    - name: Check built package (Python 3.11 only)
      if: matrix.python-version == '3.11'
      run: |
        echo "Validating built package..."
        pip install twine
        twine check dist/*
        echo "Package structure:"
        ls -la dist/
    
    - name: Upload build artifacts (Python 3.11 only)
      if: matrix.python-version == '3.11'
      uses: actions/upload-artifact@v3
      with:
        name: rolint-dist-${{ github.sha }}
        path: RoLint/dist/
        retention-days: 7
    
    - name: Test installation (Python 3.11 only)
      if: matrix.python-version == '3.11'
      run: |
        echo "Testing package installation..."
        # Create a fresh virtual environment and test installation
        cd /tmp
        python -m venv test_env
        source test_env/bin/activate
        pip install $GITHUB_WORKSPACE/RoLint/dist/*.whl
        python -c "import rolint; print('RoLint package imported successfully!')"
        # Test CLI if it exists
        if command -v rolint &> /dev/null; then
          rolint --help || echo "CLI help not available, but command exists"
        fi

  summary:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        if [ "${{ needs.test-and-build.result }}" == "success" ]; then
          echo "All tests passed! RoLint is ready for release."
          echo "Package built successfully and validated."
          echo "Ready to merge and publish!"
        else
          echo "Tests failed! Please check the logs above."
          exit 1
        fi