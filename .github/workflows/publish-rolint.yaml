name: Build and Publish RoLint Package

on:
  push:
    branches: [ main ]
    paths:
      - 'RoLint/**'  # Only trigger when RoLint directory changes
  pull_request:
    branches: [ main ]
    paths:
      - 'RoLint/**'  # Only trigger when RoLint directory changes

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]
    
    defaults:
      run:
        working-directory: ./RoLint  # Set working directory for all steps
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build pytest flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        # Install the package in development mode
        pip install -e .
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 rolint/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 rolint/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests
      run: |
        # Run tests from the tests directory
        if [ -d "tests" ]; then
          pytest tests/ -v
        else
          echo "No tests directory found, skipping test step"
        fi

  build-and-publish:
    needs: test
    runs-on: ubuntu-latest
    # Only run on push to main (not on PRs)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    defaults:
      run:
        working-directory: ./RoLint  # Set working directory for all steps
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper versioning
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build RoLint package
      run: python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: List built packages
      run: |
        echo "Built packages:"
        ls -la dist/
        
    - name: Publish RoLint to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: Get package version
      id: get_version
      run: |
        # Extract version from pyproject.toml
        VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])" 2>/dev/null || echo "unknown")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Package version: $VERSION"
    
    - name: Create GitHub Release for RoLint
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: rolint-v${{ steps.get_version.outputs.version }}
        release_name: RoLint v${{ steps.get_version.outputs.version }}
        body: |
          **RoLint v${{ steps.get_version.outputs.version }}** has been published to PyPI!
          
          **Install with:** `pip install rolint`
          
          **Changes in this release:**
          ${{ github.event.head_commit.message }}
          
          **Commit:** ${{ github.sha }}
        draft: false
        prerelease: false